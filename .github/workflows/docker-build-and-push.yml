name: Docker image build and push

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  ECR_SUFFIX: ".dkr.ecr.ca-central-1.amazonaws.com"
  STAGING_ACCOUNT_ID: "239043911459"
  PRODUCTION_ACCOUNT_ID: "296255494825"

jobs:
  docker-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - lambda: blazer
            image: database-tools/blazer
            folder: blazer
          - lambda: google-cidr
            image: lambda/google-cidr
            folder: google-cidr
          - lambda: heartbeat
            image: notify/heartbeat
            folder: heartbeat
          - lambda: system_status
            image: notify/system_status
            folder: system_status
          - lambda: ses_to_sqs_email_callbacks
            image: notify/ses_to_sqs_email_callbacks
            folder: sesemailcallbacks

    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - uses: dorny/paths-filter@7267a8516b6f92bdb098633497bad573efdbf271 # v2.12.0
        id: changes
        with:
          filters: |
            lambda:
              - '${{ matrix.folder }}/**'
              - '.github/workflows/docker-build-and-push.yml'
            notify_components:
              - 'heartbeat/**'
              - 'system_status/**'
              - 'sesemailcallbacks/**'
              - '.github/workflows/docker-build-and-push.yml'

      - name: Build Docker image
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        working-directory: ${{ matrix.folder }}
        run: make docker

      # Staging image push
      - name: Staging AWS credentials
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # tag=v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{ env.STAGING_ACCOUNT_ID }}:role/notification-lambdas-apply
          role-session-name: ECRPush
          aws-region: ca-central-1

      - name: Staging ECR login
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        id: staging-ecr
        uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7 # v1.7.1

      - name: Staging ECR push
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: |
          STAGING_ECR="${{ env.STAGING_ACCOUNT_ID }}${{ env.ECR_SUFFIX }}"
          docker tag ${{ matrix.image }} $STAGING_ECR/${{ matrix.image }}:${GITHUB_SHA::7}
          docker tag ${{ matrix.image }} $STAGING_ECR/${{ matrix.image }}:latest
          docker push $STAGING_ECR/${{ matrix.image }}:${GITHUB_SHA::7}
          docker push $STAGING_ECR/${{ matrix.image }}:latest

      - name: Staging ECR logout
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: docker logout ${{ steps.staging-ecr.outputs.registry }}

      # Staging Lambda Restart
      - name: Deploy lambda
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: |
          if [[ "${{ matrix.image }}" != "database-tools/blazer" ]]; then
            STAGING_ECR="${{ env.STAGING_ACCOUNT_ID }}${{ env.ECR_SUFFIX }}"
            aws lambda update-function-code \
              --function-name ${{ matrix.lambda }} \
              --image-uri $STAGING_ECR/${{ matrix.image }}:${GITHUB_SHA::7} > /dev/null 2>&1
          fi

      - name: Publish lambda version and update alias
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: |
          if [[ "${{ matrix.image }}" != "database-tools/blazer" ]]; then
            aws lambda wait function-updated --function-name ${{ matrix.lambda }}
            VERSION="$(aws lambda publish-version --function-name ${{ matrix.lambda }} | jq -r '.Version')"
            aws lambda update-alias \
              --function-name ${{ matrix.lambda }} \
              --name latest \
              --function-version "$VERSION" > /dev/null 2>&1
          fi

      # Production image push
      - name: Production AWS credentials
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # tag=v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{ env.PRODUCTION_ACCOUNT_ID }}:role/notification-lambdas-apply
          role-session-name: ECRPush
          aws-region: ca-central-1

      - name: Production ECR login
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        id: production-ecr
        uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7 # v1.7.1

      - name: Production ECR push
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: |
          PRODUCTION_ECR="${{ env.PRODUCTION_ACCOUNT_ID }}${{ env.ECR_SUFFIX }}"
          docker tag ${{ matrix.image }} $PRODUCTION_ECR/${{ matrix.image }}:${GITHUB_SHA::7}
          docker tag ${{ matrix.image }} $PRODUCTION_ECR/${{ matrix.image }}:latest
          docker push $PRODUCTION_ECR/${{ matrix.image }}:${GITHUB_SHA::7}
          docker push $PRODUCTION_ECR/${{ matrix.image }}:latest

      - name: Generate docker SBOM
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        uses: cds-snc/security-tools/.github/actions/generate-sbom@34794baf2af592913bb5b51d8df4f8d0acc49b6f # v3.2.0
        env:
          TRIVY_DB_REPOSITORY: ${{ vars.TRIVY_DB_REPOSITORY }}
          TRIVY_JAVA_DB_REPOSITORY: ${{ vars.TRIVY_JAVA_DB_REPOSITORY }}
        with:
          docker_image: "${{ env.PRODUCTION_ACCOUNT_ID }}${{ env.ECR_SUFFIX }}/${{ matrix.image }}:latest"
          dockerfile_path: "${{ matrix.folder }}/Dockerfile"
          sbom_name: "${{ matrix.lambda }}"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Production ECR logout
        if: |
          steps.changes.outputs.lambda == 'true' ||
          (steps.changes.outputs.notify_components == 'true' && (matrix.lambda == 'heartbeat' || matrix.lambda == 'system_status' || matrix.lambda == 'ses_to_sqs_email_callbacks'))
        run: docker logout ${{ steps.production-ecr.outputs.registry }}

      - name: my-app-install token
        id: notify-pr-bot
        uses: getsentry/action-github-app-token@38a3ce582e170ddfe8789f509597c6944f2292a9 # v1.0.6
        with:
          app_id: ${{ secrets.NOTIFY_PR_BOT_APP_ID }}
          private_key: ${{ secrets.NOTIFY_PR_BOT_PRIVATE_KEY }}
        # Only run pr-bot for non-notify components or if all notify components are built
        if: |
          ${{ matrix.lambda != 'blazer' && 
          (steps.changes.outputs.lambda == 'true' && matrix.lambda != 'heartbeat' && matrix.lambda != 'system_status' && matrix.lambda != 'ses_to_sqs_email_callbacks') ||
          (matrix.lambda == 'heartbeat' && steps.changes.outputs.notify_components == 'true') }}

      - uses: cds-snc/notification-pr-bot@main
        env:
          TOKEN: ${{ steps.notify-pr-bot.outputs.token }}
        # Only run pr-bot for non-notify components or if all notify components are built
        if: |
          ${{ matrix.lambda != 'blazer' && 
          (steps.changes.outputs.lambda == 'true' && matrix.lambda != 'heartbeat' && matrix.lambda != 'system_status' && matrix.lambda != 'ses_to_sqs_email_callbacks') ||
          (matrix.lambda == 'heartbeat' && steps.changes.outputs.notify_components == 'true') }}